"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A datetime and timezone string in ISO 8601 format `Y-m-dTH:i:sO`, e.g. `2020-04-20T13:53:12+02:00`."
scalar DateTimeTz @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")

type Mutation {
  login(username: String!, password: String!): LoginResponse!
  register(input: RegisterInput! @spread): User! @create

}

extend type Mutation @guard{
  logout: GenericResponse!
  addToMyMovieList(input: AddToMyMovieListInput @spread): UserMovie! @addToMyMovieListValidation
  updateMyMovieList(movie_id: ID! input: UpdateMyMovieListInput @spread): UserMovie! @updateMyMovieListValidation
  deleteFromMyMovieList(movie_id: ID!): UserMovie @deleteFromMyMovieListValidation
}

type Query {
  users: [User!]! @paginate(defaultCount: 10)
  user(searchString: String! searchField: UserSearchField!): User
  me: User @auth @guard

  movies: [Movie!]! @paginate(defaultCount: 10)
  movie(id: ID @eq): Movie @find

  actors: [Actor] @paginate(defaultCount: 10)
  actor(id: ID @eq): Actor @find

  genres: [Genre] @paginate(defaultCount: 10)
  genre(id: ID @eq): Genre @find

  directors: [Director] @paginate(defaultCount: 10)
  director(id: ID @eq): Director @find

  countries: [Country] @paginate(defaultCount: 10)
  country(id: ID @eq): Country @find

  languages: [Language] @paginate(defaultCount: 10)
  language(id: ID @eq): Language @find

  userMovies: [UserMovie] @paginate(defaultCount: 10)
  userMovie(id: ID @eq): UserMovie @find
}

input RegisterInput {
  username: String! @rules(apply: ["required", "min:3", "max:14", "unique:users,username"])
  email: String! @rules(apply: ["required", "email", "unique:users,email"])
  confirm_password: String! @rules(apply: ["required", "same:input.password"]) @hash
  password: String! @rules(apply: ["required", "min:10", "not_regex:/\\s/"], messages: {not_regex: "The password must not contain any spaces!"}) @hash
}

input AddToMyMovieListInput {
  movie_id: ID!
  status_id: ID!
  rating: Int
  date_watched: Date
  times_rewatched: Int
  comment: String
}

input UpdateMyMovieListInput {
  status_id: ID
  rating: Int
  date_watched: Date
  times_rewatched: Int
  comment: String
}

enum UserSearchField {
  ID
  USERNAME
  EMAIL
}

type LoginResponse {
  message: String!
  user: User
}

type GenericResponse {
  message: String!
}

type User {
  id: ID!
  username: String!
  email: String!
  created_at: DateTime!
  updated_at: DateTime!
  userMovies: [UserMovie] @hasMany
}

type UserMovie {
  id: ID!
  rating: Float
  date_watched: Date
  times_rewatched: Int!
  comment: String
  user: User @belongsTo
  movie: Movie @belongsTo
  status: Status @belongsTo
}

type Status {
  id: ID!
  name: String!
  userMovies: [UserMovie] @hasMany
}

type Movie {
  id: ID!
  title: String!
  rating: String
  year: Int!
  users_rating: Float!
  metascore: Int
  img_url: String!
  high_res_poster_url: String!
  tagline: String! #make this nullable in the future
  description: String
  runtime: Int!
  imdb_url: String!
  created_at: DateTime!
  updated_at: DateTime!
  actors: [Actor] @belongsToMany
  countries: [Country] @belongsToMany
  directors: [Director] @belongsToMany
  genres: [Genre] @belongsToMany
  languages: [Language] @belongsToMany
  userMovies: [UserMovie] @hasMany
}

type Actor {
  id: ID!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  movies: [Movie] @belongsToMany
}

type Country {
  id: ID!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  movies: [Movie] @belongsToMany
}

type Director {
  id: ID!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  movies: [Movie] @belongsToMany
}

type Genre {
  id: ID!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  movies: [Movie] @belongsToMany
}

type Language {
  id: ID!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  movies: [Movie] @belongsToMany
}
